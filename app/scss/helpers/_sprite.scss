/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$fb-big-hover: (62px, 0px, -62px, 0px, 11px, 21px, 73px, 72px, '../i/sprite.png', 'fb-big-hover', );
$fb-big: (62px, 21px, -62px, -21px, 11px, 21px, 73px, 72px, '../i/sprite.png', 'fb-big', );
$fb-hover: (50px, 56px, -50px, -56px, 6px, 12px, 73px, 72px, '../i/sprite.png', 'fb-hover', );
$fb: (53px, 21px, -53px, -21px, 6px, 12px, 73px, 72px, '../i/sprite.png', 'fb', );
$lunch: (0px, 0px, 0px, 0px, 37px, 35px, 73px, 72px, '../i/sprite.png', 'lunch', );
$marker: (12px, 56px, -12px, -56px, 12px, 16px, 73px, 72px, '../i/sprite.png', 'marker', );
$phone: (0px, 56px, 0px, -56px, 12px, 16px, 73px, 72px, '../i/sprite.png', 'phone', );
$tw-big-hover: (37px, 0px, -37px, 0px, 25px, 21px, 73px, 72px, '../i/sprite.png', 'tw-big-hover', );
$tw-big: (0px, 35px, 0px, -35px, 25px, 21px, 73px, 72px, '../i/sprite.png', 'tw-big', );
$tw-hover: (37px, 21px, -37px, -21px, 16px, 12px, 73px, 72px, '../i/sprite.png', 'tw-hover', );
$tw: (24px, 56px, -24px, -56px, 16px, 12px, 73px, 72px, '../i/sprite.png', 'tw', );
$vk-big-hover: (41px, 35px, -41px, -35px, 16px, 21px, 73px, 72px, '../i/sprite.png', 'vk-big-hover', );
$vk-big: (25px, 35px, -25px, -35px, 16px, 21px, 73px, 72px, '../i/sprite.png', 'vk-big', );
$vk-hover: (62px, 42px, -62px, -42px, 10px, 12px, 73px, 72px, '../i/sprite.png', 'vk-hover', );
$vk: (40px, 56px, -40px, -56px, 10px, 12px, 73px, 72px, '../i/sprite.png', 'vk', );
$spritesheet-sprites: ($fb-big-hover, $fb-big, $fb-hover, $fb, $lunch, $marker, $phone, $tw-big-hover, $tw-big, $tw-hover, $tw, $vk-big-hover, $vk-big, $vk-hover, $vk, );
$spritesheet: (73px, 72px, '../i/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
